# Срабатывают в момент отображения информации об экземпляре класса:
# __str__() - для пользователей(например, для функции print, str)
# __repr__() - для разработчиков в режиме отладки

# Позволяют применять функции к экземплярам класса:
# __len__ - функцию len()
# __abs__ - функцию abs()

class Cat:
    def __init__(self, name):
        self.name = name

    # Магический метод для служебной информации об экземпляре класса
    def __repr__(self):
        return f"{self.__class__}: {self.name}"

    # Магический метод для вывода информации для пользователей об экземпляре класса(пример: print, str)
    def __str__(self):
        return f"{self.name}"


my_cat = Cat("Barsic")

# Вместо стандартной информации об объекте и адресе в памяти, получаем нашу строку из __str__
print(my_cat)
# Если в консоли введем my_cat (получим нашу строку из __repr__)


# Класс с произвольным количеством координат
class Point:
    def __init__(self, *args):
        self.__coords = args

    # Магический метод для вызова функции len() в экземплярах класса
    def __len__(self):
        return len(self.__coords)

    # Магический метод для вызова функции abs() в экземплярах класса
    def __abs__(self):
        return list(map(abs, self.__coords))


p = Point(1, -2)

# Если вызовем функции len() и(или) abs() для экземпляра класса, для получения кол-ва координат в экземпляре,
# БЕЗ МАГИЧЕСКОГО МЕТОДА __len__ и(или) __abs__, то получим ошибку
print(len(p))
print(abs(p))
