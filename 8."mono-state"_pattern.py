# Паттерн "Моносостояние" сводится к управлению атрибутами экземпляров класса
# (все экземпляры класса имели одни атрибуты и при изменении атрибута в одном экземпляре класса,
# приводило к изменению того же атрибута в других экземплярах класса)

class ThreadData:
    # Приватный атрибут класса(словарь с общими локальными атрибутами экземпляров класса)
    __shared_attrs = {
        'name': 'thread_1',
        'data': {},
        'id': 1
    }

    # Инициализатор
    def __init__(self):
        # self.__dict__ хранит коллекцию атрибутов экземпляра класса)
        self.__dict__ = self.__shared_attrs

th1 = ThreadData()
th2 = ThreadData()

# Проверяем локальные свойства экземпляров класса(одинаковые локальные атрибуты экземпляров класса создались)
print(th1.__dict__)
print(th2.__dict__)

# Меняем в одном экземпляре класса его локальный атрибут(атрибуты поменялись во всех экземплярах класса)
th2.id = 3
print(th1.__dict__)
print(th2.__dict__)

# Создаем в одном экземпляре класса локальный атрибут и проверям создатся ли в других экземплярах класса(работает)
th2.new_attr = "True"
print(th1.__dict__)
print(th2.__dict__)
