# Коллекция __slots__
# - Ограничение создаваемых локальных свойств экземпляров класса
# - Уменьшение размера занимаемой памяти экземпляров класса
# _ Ускорение работы с локальными свойствами экземпляров класса

# Импорт библиотеки timeit для измерения работы экземпляров класса
import timeit


class Point:
    m = "Свойство класса"

    def __init__(self, x, y):
        self.x = x
        self.y = y

    # Метод для проверки скорости работы
    def calc(self):
        self.x += 1
        del self.y
        self.y = 0


class Point2:
    m = "Свойство класса"
    # Указываем какие ЛОКАЛЬНЫЕ свойства будут разрешены в экземплярах класса Point2
    # (разрешено создавать, обращаться только к ним, иначе исключение)
    # При использовании коллекции __slots__ у экземпляров класса не будет __dict__
    # При использовании коллекции __slots__ у экземпляров класса меньше места в памяти
    # При использовании коллекции __slots__ ускоряется работа с ее переменными

    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y

    # Метод для проверки скорости работы
    def calc(self):
        self.x += 1
        del self.y
        self.y = 0


pt = Point(1, 2)
pt.z = 10
print(pt.x)
print('pt:', pt.__dict__)

pt2 = Point2(10, 20)
print(pt2.y)

# Исключения из-за коллекции __slots__
# pt2.z = 10
# print(pt2.__dict__)

# Обращаемся к СВОЙСТВУ КЛАССА, а не к локальному свойству экземпляра класса, поэтому и нет исключения
print(pt2.m)

# Проверяем объем памяти занимаемый экземплярами двух классов, используем __sizeof__()
print('Класс Point занимает памяти :', pt.__sizeof__() + pt.__dict__.__sizeof__(), "бит.")
print('Класс Point2 занимает памяти :', pt2.__sizeof__(), "бит.")

# Проверяем быстродействие
test_P = Point(3, 5)
test_P2 = Point2(3, 5)
t1 = timeit.timeit(test_P.calc)
t2 = timeit.timeit(test_P2.calc)
print(f'Cкорость test_P {t1}', f'Cкорость test_P2 {t2}', sep="\n")
