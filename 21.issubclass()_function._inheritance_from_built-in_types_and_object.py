# Все наши классы неявно наследуются от объекта object

class Geom:
    pass


# Класс Line наследуется только от Geom, а так как Geom уже наследуется от object, то Line имеет доступ к object
class Line(Geom):
    pass


g = Geom()
l = Line()

# Мы увидим работу магического метода __str__ прописанного в object
print(g)

# Проверяем имеет ли доступ экземпляр класса Line к object
print(l.__class__)

# Функция issubclass() РАБОТАЕТ только с КЛАССАМИ и проверяет, наследуется ли класс от другого класса
# ПЕРВЫМ аргументом указывается ДОЧЕРНИЙ класс, ВТОРЫМ РОДИТЕЛЬСКИЙ
print(issubclass(Line, Geom))

# Если нам надо проверить экземпляр класса, можем использовать функцию isinstance(l, object)
print(isinstance(l, object))

# Типы данных так же являются класса, можем проверить с помощью функции issubclass()(она принимает только классы)
print(issubclass(int, object))


# попробует изменить функционал класса int, путём унаследования от него нашего класса
class Vector(list):
    # Меняем магический метод __str__()
    def __str__(self):
        # Выводим элементы через пробел в строке
        return " ".join(map(str, self))


v = Vector([1, 2, 3])

print(v)
# Теперь v является типом класса Vector
print(type(v))