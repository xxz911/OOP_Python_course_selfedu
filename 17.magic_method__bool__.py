# Функция bool() и магические методы
# __len__() - вызывается функцией bool(), если не определен магический метод __bool__
# __bool__() - вызывается в приоритетном порядке функцией bool()

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __len__(self):
        print("Вызвана __len__")
        # Возвращаем квадрат длинны радиус-вектора
        return self.x * self.x + self.y * self.y

    # Работает в приоритете, если прописан то вызывается он,
    # если не прописан, то вызывается через магический метод len()
    # В учебных целях True это когда одинаковые координаты
    def __bool__(self):
        print("Вызвана __bool__")
        return self.x == self.y


p = Point(0, 0)
# Вызовем функцию bool для экземпляров класса и увидим True,
# на самом деле ВСЕГДА будет возвращаться True для пользовательских объектов класса
print(bool(p))

# Для работы с экземплярами класса функции bool() нам нужно переопределить:
# ЛИБО магический метод __bool__()
# ЛИБО магический метод __len__()

# После переопределения магического метода __len__() и отсутствия __bool(),
# функция bool() вызывает магический метод __len__ делает расчеты и возвращает истинность
print(bool(p))
print(len(p))

# Если нам надо ЯВНО переопределить работу функции bool() для работы с нашими экземплярами класса,
# надо прописать в классе магический метод __bool__()


# ГДЕ ПРИМЕНЯЕТСЯ?
# Обычно явно функцию bool() для экземпляров класса не используют, она используется НЕЯВНО, например:
if p:
    print("Объект p дает True")
else:
    print("Объект p дает False")