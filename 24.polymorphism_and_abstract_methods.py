# Полиморфизм - возможность работы с совершенно разными объектами(языка Python) единым образом
# (через единый интерфейс(одно имя для всех экземпляров)

# Базовый класс
class Geom:
    # Методы, которые не имеют собственной реализации и обязательно должны быть ПЕРЕОПРЕДЕЛЕНЫ дочерними классами,
    # называются АБСТРАКТНЫМИ(в Python НЕТ ЧИСТО АБСТРАКТНЫХ МЕТОДОВ, мы просто моделируем схожее поведение)
    def get_pr(self):
        # return -1
        return NotImplementedError("В дочернем классе должен быть переопределен метод get_pr()")


# Класс для прямоугольников
class Rectangle(Geom):
    def __init__(self, w, h):
        self.w = w
        self.h = h

    # Геттер для получения периметра
    # def get_rect_pr(self):
    def get_pr(self):
        return 2*(self.w + self.h)


# Класс для квадратов
class Square(Geom):
    def __init__(self, a):
        self.a = a

    # Геттер для получения периметра
    # def get_sq_pr(self):
    def get_pr(self):
        return 4 * self.a


# Класс для треугольников
class Triangle(Geom):
    def __init__(self, a, b, c):
        self.a = a
        self.b =b
        self.c = c

    # Геттер для получения периметра
    # def get_tr_pr(self):
    def get_pr(self):
        return self.a + self.b + self.c

# Создаем по 2 экземпляра каждого класса
r1 = Rectangle(1, 2)
r2 = Rectangle(3, 4)
s1 = Square(10)
s2 = Square(20)
t1 = Triangle(1, 2, 3)
t2 = Triangle(4, 5, 6)

# Получаем их периметры(используя старые и разные имена геттеров((они закомментированы)))
# print(r1.get_rect_pr(), r2.get_rect_pr())
# print(s1.get_sq_pr(), s2.get_sq_pr())

# Предположим, что мы хотим получить список из экземпляров всех классов
geom = [r1, r2, s1, s2, t1, t2]
# Перебираем все экземпляры
for g in geom:
    # Мы хотим вызвать геттер, однако у нас их три разных(имена закомментированы)
    # Тут нам поможет полиморфизм, мы решаем, что все методы по определению периметра будут иметь одинаковое называние
    print(g.get_pr())
    # Однако у нас теперь есть еще один момент, допустим что мы забываем в одном классе прописать геттер для периметра,
    # тогда программа завершится исключением, а нам надо чтобы программа продолжила работу
    # Мы можем создать Родительский класс и прописать в нем наш геттер(возвращаем -1)
    # (в случае, если в дочернем классе не будет этого метода, он сработает из родительского класса)
    # ОДНАКО если мы хотим чтобы геттеры отрабатывали как надо,
    # лучше возвращать NotImplementedError(метод ведет себя подобно абстрактным) с сообщением,
    # что в дочернем классе нет геттера

print(1)