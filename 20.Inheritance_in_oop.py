class Geom:
    name = "Geom"

    # Прописываем координаты в базовом классе, чтобы убрать дублирование кода
    # ПАРАМЕТР self В РОДИТЕЛЬСКИХ КЛАССАХ МОЖЕТ ССЫЛКАТЬСЯ КАК НА СВОИ ЭКЗЕМПЛЯРЫ, ТАК И НА ЭКЗЕМПЛЯРЫ ДОЧЕРНИХ КЛАССОВ,
    # в зависимости от того, откуда был вызван этот метод
    def set_coords(self, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        # ВЫЗЫВАТЬ МЕТОДЫ В РОДИТЕЛЬСКОМ КЛАССЕ НАДО ЛИБО ПРОПИСАННЫХ В ДОЧЕРНИХ КЛАССАХ ЛИБО В РОДИТЕЛЬСКОМ,
        # если прописать вызов этого метода, то он будет вызван из двух дочерних классов и БУДЕТ исключение, так как при
        # g.set_coords(0, 0, 0, 0) self будет ссылаться на родительский класс в котором НЕТ ЭТОГО МЕТОДА
        # self.draw()


# Наследуемся от Geom
class Line(Geom):
    # Когда мы в дочернем классе изменяем атрибут Родительского, это называется ПЕРЕОПРЕДЕЛЕНИЕМ
    # (в редакторе Pycharm стрелочка вверх)
    name = "Line"

    def draw(self):
        print("Рисование линии")

    # Чем больше фигур(классов), тем больше дублирования кода
    # def set_coords(self, x1, y1, x2, y2):
    #     self.x1 = x1
    #     self.y1 = y1
    #     self.x2 = x2
    #     self.y2 = y2


class Rect(Geom):
    def draw(self):
        print("Рисование прямоугольника")
    # Чем больше фигур(классов), тем больше дублирования кода
    # def set_coords(self, x1, y1, x2, y2):
    #     self.x1 = x1
    #     self.y1 = y1
    #     self.x2 = x2
    #     self.y2 = y2


t = Line()

# Мы можем спокойно обратится свойству класса Line через его экземпляр класса
t.draw()
# Но не можем обратиться через этот экземпляр класса к свойству другого класса,
# так как это совершенно разные пространства имен
# print(l.name)

# Но при необходимости мы можем установить связь между ними, прописав в скобках после имени класса другой класс,
# с которым устанавливается связь пространств имен. Теперь можем обратится к методу класса Geom из класса Line
print(t.name)

# В нашем примере:
# - класс Geom является БАЗОВЫМ(РОДИТЕЛЬСКИМ)
# - класс Line является ПОДКЛАССОМ(ДОЧЕРНИМ)
# - класс Rect является ПОДКЛАССОМ(ДОЧЕРНИМ)

# Создаем экземпляр родительского класса
g = Geom()
# Создаем экземпляры дочерних классов
l = Line()
r = Rect()
# Обращаемся к родительскому методу в дочерних экземплярах класса
# Сначала метод ищется в дочернем классе, если не находится, то поиск происходит в родительском классе
l.set_coords(1, 1, 2, 2)
r.set_coords(3, 3, 4, 4)
# Вызываем метод set_coord из родительского класса
g.set_coords(0, 0, 0, 0)

# Проверяем где создались локальные свойства класса(на что ссылался параметр self)
print('Свойства l(Line)', l.__dict__)
print('Свойства r(Rect)', r.__dict__)
print('Свойства g(Geom)', g.__dict__)

# Обращаемся через экземпляры дочерних классов к свойствам родительского класса
# Сначала свойство ищется в дочернем классе, если не находится, то поиск происходит в родительском классе
print(l.name)
print(r.name)
